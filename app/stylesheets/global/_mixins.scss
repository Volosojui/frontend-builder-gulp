/*========================================
// Clear
========================================*/

@mixin clearfix {
  &:after {
    content: "" !important;
    display: block !important;
    clear: both !important;
  }
}

@mixin sr-only() {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
}


/*========================================
// Breakpoints
========================================*/

@mixin breakpoint-up($point) {
  @media screen and (min-width: em($point)) {
    @content;
  }
}

@mixin breakpoint-down($point) {
  @media screen and (max-width: em($point)) {
    @content;
  }
}

@mixin breakpoint-between($start-point, $end-point) {
  @media screen and (min-width: em($start-point)) and (max-width: em($end-point)) {
    @content;
  }
}


/*========================================
// Typography
========================================*/

@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

@mixin list-style-none {
  margin: 0;
  padding: 0;
  list-style-type: none;
}

@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}


/*========================================
// CSS Features
========================================*/

@mixin retina($file, $type, $width: 0, $height: 0) {
  $image: '#{$file}.#{$type}';
  $image2x: '#{$file}-2x.#{$type}';

  background-repeat: no-repeat;
  background-image: url($image);

  @media screen and (min--moz-device-pixel-ratio: 1.3),
         screen and (-o-min-device-pixel-ratio: 2.6/2),
         screen and (-webkit-min-device-pixel-ratio: 1.3),
         screen and (min-device-pixel-ratio: 1.3),
         screen and (min-resolution: 1.3dppx) {
    background-image: url($image2x);

    @if $width != 0 and $height != 0 {
      background-size: $width $height;
    }
  }
}


/*========================================
// Inputs
========================================*/

@mixin input-size($height, $padding-horizontal, $font-size, $line-height, $context: $browser-context) {
  $padding-bottom: decimal-round(($height - $line-height) / 2);
  $padding-top: ($height - $line-height) - $padding-bottom;
  height: rem($height, $context);
  padding: rem($padding-top - 1, $context) rem($padding-horizontal, $context) rem($padding-bottom - 1, $context);
  font-size: rem($font-size, $context);
  line-height: rem($line-height, $context);
}


/*========================================
// Selects
========================================*/

@mixin select-size($height, $padding-horizontal, $font-size, $line-height, $context: $browser-context) {
  $padding-bottom: decimal-round(($height - $line-height) / 2);
  $padding-top: ($height - $line-height) - $padding-bottom;
  height: rem($height, $context);
  padding: rem($padding-top - 1, $context) rem($padding-horizontal, $context) rem($padding-bottom - 1, $context);
  font-size: rem($font-size, $context);
  line-height: rem($line-height, $context);
}


/*========================================
// Buttons
========================================*/

@mixin button-size($height, $padding-horizontal, $font-size, $context: $browser-context) {
  height: rem($height, $context);
  padding-right: rem($padding-horizontal, $context);
  padding-left: rem($padding-horizontal, $context);
  font-size: rem($font-size, $context);
  line-height: rem($height - 1, $context);
}

@mixin button-style($background, $color, $color-hover: $color) {
  background-color: $background;
  color: $color;

  &:hover {
    background-color: lighten($background, 6%);
    color: $color-hover;
  }
}

@mixin button-outline($border-color, $color, $border-color-hover: $border-color, $background-color-hover: false, $color-hover: $color) {
  border-color: $border-color;
  color: $color;

  &:hover {
    border-color: $border-color-hover;
    @if $background-color-hover {
      background-color: $background-color-hover;
    }
    color: $color-hover;
  }
}